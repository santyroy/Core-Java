Notes:
===========================


- JVM is build in C++ and JVM converts the byte code to machine code and helps run machine code as well

- Each java file can have One public class/interface, public means client can access it from anywhere

- Name of public class should be same as that of java file

- JVM only and only calls "public static void main(String[] args){}" method at the beginning of any java program

- If there is no main method in a java file code would still compile but to run it JVM needs a main method if not found gives runtime error

- In Java there are two types of memory:
	- Stack 
		- these have primitive values local to a method (local variables(int a = 1))
		- reference to the object in the heap memory (Integer ref, int[] arr)
		- LIFO algorithm
		- low size compared to heap memory
	- Heap
		- these stores actually values for Wrapper classes (Integer)
		- stores actually value of the reference variable (new int[10])
		- Java uses heap space for dynamic method allocation for objects and classess during runtime
		- objects are created in Heap space
		- reference to these objects are stored in stack memory
		- we can manupulate the size of heap according to our requirement

- When we run a java program from console/terminal we use the syntax as 'java <program_class_file_name> <program_arguments>'
	- the arguments passed after the word 'java' is the argument for JVM, here the class name is an JVM argument
	- the arguments passed after the 'class file name' is the program arguments which we can use in the program 
	  from the (String[] args) array
	- example: java -Xmx1g comroy_07operationsConsoleCalculator 1 3



Naming Conventions:
===========================
class name 		        - Should start with uppercase letter (eg: Integer, String)
variable/method name 	- Should start with lowercase letter followed by camel case (eg: number, println(), checkError())
constant name 		    - Should have all uppercase letters (eg: SOME_CONSTANT)


Comments:
===========================
- // single line comment
- /*  */ multi line comment
- /**  */ javadoc comment


Datatype:
===========================
- Primitive (stores actual value)
	- TYPE, 	SIZE,		MIN VALUE,	MAX VALUE,		WRAPPER
	- byte, 	1 byte,	-128,		127,			Byte
	- short,	2 bytes,	-2^15		2^15 - 1		Short
	- int, 	4 bytes,	-2^31		2^31 - 1		Integer
	- long, 	8 bytes,	-2^63		2^63 - 1		Long
	- float	4 bytes,	-34E+38F	+34E+38F		Float
	- double	8 bytes,	-17E+308	+17E+308		Double
	- boolean	VM dependent	false		true			Boolean
	- char		2 bytes	0		65,535			Character
	
- Reference (stores addresses/memory location of the actual object they refer to)
	- Classes
	- Annotations
	- Interfaces
	- Enumerations
	- Arrays
	
- Java is object oriented language still we have primitive types because of efficency and increase performance
- Number type variables are by default integer in java
- Floating point type variables are by default double in java
- Integer and Floating point values are stored differently in the memory



Number System:
=============================

- Binary 	- radix=2 	(0,1)
- Decimal	- base=10 	(0,1,2,3,4,5,6,7,8,9)
- Octal  	- base=8	(0,1,2,3,4,5,6,7)
- Hexadecimal	- base=16	(0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F)


Arrays:
===============================

- It is an object which contains elements of similar data types and support access to them by index
- Index of first element in an array is 0
- fixed size, once declared cannot be changed
- can access any element at any index at constant/same amout of time


Operators:
===============================
- It is a symbol that performs specific kind of operations on one,two or more operands
- Type:
	- Based on number of operands - uninary operator (+, -, ++, --) , binary operator (+, -, *, /), ternary operator (?:)
	- Type of operation - Arithmetic, Relational, Logical, Bitwise
	

Random Number:
===============================
- Using Math class
	- (Mathrandom()) 			// between 00 and 10
	- ((int) (Mathrandom() * 100)) 	// between 0 and 100
	- ((int) (Mathrandom() * 100) + 100)	// between 100 and 200
	
	
- Using Random class
	- (r.nextInt()); 			// any random int
	- (r.nextInt(100)); 			// any int from 0 to 99
	- (r.nextInt(100) + 1); 		// any int from 1 to 100


Methods:
===============================

<method_name>(param1, param2) -> this is known as method signature
eg: sum(int a, int b)


access modifier or return type is not considered within method signature because of method overloading concept

method overloading -> same method name with different parameters
eg:	sum(int a, int b)
	sume(float a, float b)
	
	
		
Arguments in a method can be passed by two ways:
	1 call by value
	2 call by reference
	
Call by value -> 	here the copy of the original variable is passed as the method argument
			all operations takes place on the copy of the argument and original is untouched
			
Call by reference ->	here the actual pointer to the variables memory location is passed as an argument
			thus all the operations takes place on the original variable
			
			
 ** IN JAVA PRIMITIVE AND REFERENCE TYPES OF DATA ARE PASSED BY VALUE, there is no direct pass by reference in java
 Always a copy of the primitive value or copy of the reference is passed
 Now a copy of reference would still point to the original object and any change in property for the copied reference
 would also point the original object
 
 
 
Enum:
================================================
 
- It is a special datatype which enables a variable to be a set of predefined constants
- Enums can be compared using == operators beacuse each enum variable has its own ordinal value
 
 
OOP - Object Oriented Programming
================================================
- OOPs is software design approach in which concept of 'object' occupies the first place rather than functions
- Objects, first of all, is a virtual entity with specific list of properties which can distinguish it from other objects and behavior which allow to manipulate
  with these properties
- Object = Data + Behavior
- Advantages = modularity, scalability, lower cost of development (reuse code), security & reliability (abstruction, encapsulation)
- 4 pillars => Encapsulation, Abstraction, Inheritence, Polymorphism
    
    Inheritance
        - Inheritance allows you to create new class based on another class
        - New class can extend existing class and share properties and behavior
        - New class is called child class and basic class is called parent class
        - Inheritance allows you to reuse code and to create new classes without reinventing the wheel

    Encapsulation
        - The key principle tells us to keep data and code that can manipulate data together
        - It is also about keeping data and code safe from external interference
        - Acess modifier are used to provide encapsulation behavior
            - private = access with in same class
            - default = access with in same package
            - protected = access with in same package and outside of package within child/extended classes
            - public = access from anywhere

    Polymorphism
        - Overriding the current behavior in child classess

    Abstraction
        - Its main goal is to handle complexity by hiding unnecessary details from the user. 
        - That enables the user to implement more complex logic on top of the provided abstraction without understanding about all the hidden complexity
        
       
Interfaces:
=======================================================
	- Can have abstract, default and static methods of any number.
	- Interfaces which have only one abstract method is known as Functional Interface. eg: Runnable, Callable
	- We need not provide modifers "public abstract" before an abstract method, compiler automatically denotes it.
	- Interfaces can have CONSTANTS with modifier "public static final" which need not be specified explicitly.
	- Classes can implement multiple interfaces, but there will be compilation error if both interfaces have same default method.
	
	Abstract Class							Interfaces
	-------------------------------------------------------------------------------------------------------
	- "extends" keyword						- "implements" keyword
	- can have field with all possible modifiers			- all fields are constants
	- can't be extended simultaneously with other classes	- can be implemented together with other interfaces
	
TYPE - summarizes the common features of a set of objects with the same characteristics.

