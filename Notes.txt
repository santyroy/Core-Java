Notes:
===========================


- JVM is build in C++ and JVM converts the byte code to machine code and helps run machine code as well

- Each java file can have One public class/interface, public means client can access it from anywhere

- Name of public class should be same as that of java file

- JVM only and only calls "public static void main(String[] args){}" method at the beginning of any java program

- If there is no main method in a java file code would still compile but to run it JVM needs a main method if not found gives runtime error

- In Java there are two types of memory:
	- Stack 
		- these have primitive values local to a method (local variables(int a = 1))
		- reference to the object in the heap memory (Integer ref, int[] arr)
		- LIFO algorithm
		- low size compared to heap memory
	- Heap
		- these stores actually values for Wrapper classes (Integer)
		- stores actually value of the reference variable (new int[10])
		- Java uses heap space for dynamic method allocation for objects and classess during runtime
		- objects are created in Heap space
		- reference to these objects are stored in stack memory
		- we can manupulate the size of heap according to our requirement

- When we run a java program from console/terminal we use the syntax as 'java <program_class_file_name> <program_arguments>'
	- the arguments passed after the word 'java' is the argument for JVM, here the class name is an JVM argument
	- the arguments passed after the 'class file name' is the program arguments which we can use in the program 
	  from the (String[] args) array
	- example: java -Xmx1g comroy_07operationsConsoleCalculator 1 3



Naming Conventions:
===========================
class name 		        - Should start with uppercase letter (eg: Integer, String)
variable/method name 	- Should start with lowercase letter followed by camel case (eg: number, println(), checkError())
constant name 		    - Should have all uppercase letters (eg: SOME_CONSTANT)


Comments:
===========================
- // single line comment
- /*  */ multi line comment
- /**  */ javadoc comment


Datatype:
===========================
- Primitive (stores actual value)
	- TYPE, 	SIZE,		    MIN VALUE,	MAX VALUE,		WRAPPER
	- byte, 	1 byte,	        -128,		127,			Byte
	- short,	2 bytes,	    -2^15		2^15 - 1		Short
	- int, 	    4 bytes,	    -2^31		2^31 - 1		Integer
	- long, 	8 bytes,	    -2^63		2^63 - 1		Long
	- float	    4 bytes,	    -34E+38F	+34E+38F		Float
	- double	8 bytes,	    -17E+308	+17E+308		Double
	- boolean	VM dependent    false		true			Boolean
	- char		2 bytes	        0		    65,535		    Character
	
- Reference (stores addresses/memory location of the actual object they refer to)
	- Classes
	- Annotations
	- Interfaces
	- Enumerations
	- Arrays
	
- Java is object oriented language still we have primitive types because of efficency and increase performance
- Number type variables are by default integer in java
- Floating point type variables are by default double in java
- Integer and Floating point values are stored differently in the memory



Number System:
=============================

- Binary 	    - radix=2 	(0,1)
- Decimal	    - base=10 	(0,1,2,3,4,5,6,7,8,9)
- Octal  	    - base=8	(0,1,2,3,4,5,6,7)
- Hexadecimal	- base=16	(0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F)


Arrays:
===============================

- It is an object which contains elements of similar data types and support access to them by index
- Index of first element in an array is 0
- fixed size, once declared cannot be changed
- can access any element at any index at constant/same amout of time


Operators:
===============================
- It is a symbol that performs specific kind of operations on one,two or more operands
- Type:
	- Based on number of operands - uninary operator (+, -, ++, --) , binary operator (+, -, *, /), ternary operator (?:)
	- Type of operation - Arithmetic, Relational, Logical, Bitwise
	

Random Number:
===============================
- Using Math class
	- (Mathrandom()) 			// between 00 and 10
	- ((int) (Mathrandom() * 100)) 	// between 0 and 100
	- ((int) (Mathrandom() * 100) + 100)	// between 100 and 200
	
	
- Using Random class
	- (r.nextInt()); 			// any random int
	- (r.nextInt(100)); 			// any int from 0 to 99
	- (r.nextInt(100) + 1); 		// any int from 1 to 100


Methods:
===============================

<method_name>(param1, param2) -> this is known as method signature
eg: sum(int a, int b)


access modifier or return type is not considered within method signature because of method overloading concept

method overloading -> same method name with different parameters
eg:	sum(int a, int b)
	sume(float a, float b)
	
	
		
Arguments in a method can be passed by two ways:
	1 call by value
	2 call by reference
	
Call by value -> 	here the copy of the original variable is passed as the method argument
			all operations takes place on the copy of the argument and original is untouched
			
Call by reference ->	here the actual pointer to the variables memory location is passed as an argument
			thus all the operations takes place on the original variable
			
			
 ** IN JAVA PRIMITIVE AND REFERENCE TYPES OF DATA ARE PASSED BY VALUE, there is no direct pass by reference in java
 Always a copy of the primitive value or copy of the reference is passed
 Now a copy of reference would still point to the original object and any change in property for the copied reference
 would also point the original object
 
 
 
Enum:
================================================
 
- It is a special datatype which enables a variable to be a set of predefined constants
- Enums can be compared using == operators beacuse each enum variable has its own ordinal value
 
 
OOP - Object Oriented Programming
================================================
- OOPs is software design approach in which concept of 'object' occupies the first place rather than functions
- Objects, first of all, is a virtual entity with specific list of properties which can distinguish it from other objects and behavior which allow to manipulate
  with these properties
- Object = Data + Behavior
- Advantages = modularity, scalability, lower cost of development (reuse code), security & reliability (abstruction, encapsulation)
- 4 pillars => Encapsulation, Abstraction, Inheritence, Polymorphism
    
    Inheritance
        - Inheritance allows you to create new class based on another class
        - New class can extend existing class and share properties and behavior
        - New class is called child class and basic class is called parent class
        - Inheritance allows you to reuse code and to create new classes without reinventing the wheel

    Encapsulation
        - The key principle tells us to keep data and code that can manipulate data together
        - It is also about keeping data and code safe from external interference
        - Acess modifier are used to provide encapsulation behavior
            - private = access with in same class
            - default = access with in same package
            - protected = access with in same package and outside of package within child/extended classes
            - public = access from anywhere
        - Access modifier when overridden cannot be demoted i.e a public method when overridden cannot be demoted to protected or default or private.
        - We can use the same/higher level of access modifier when overriding

    Polymorphism
        - Overriding the current behavior in child classess

    Abstraction
        - Its main goal is to handle complexity by hiding unnecessary details from the user. 
        - That enables the user to implement more complex logic on top of the provided abstraction without understanding about all the hidden complexity
        
       
Interfaces:
=======================================================
	- Can have abstract, default and static methods of any number.
	- Interfaces which have only one abstract method is known as Functional Interface. eg: Runnable, Callable
	- We need not provide modifers "public abstract" before an abstract method, compiler automatically denotes it.
	- Interfaces can have CONSTANTS with modifier "public static final" which need not be specified explicitly.
	- Classes can implement multiple interfaces, but there will be compilation error if both interfaces have same default method.
	
	Abstract Class							                Interfaces
	-------------------------------------------------------------------------------------------------------
	- "extends" keyword						                - "implements" keyword
	- can have field with all possible modifiers			- all fields are constants
	- can't be extended simultaneously with other classes	- can be implemented together with other interfaces
	
TYPE - summarizes the common features of a set of objects with the same characteristics.



Polymorphism:
========================================================
- Many forms - many behaviours
- @override annotation helps compiler and user to tell that the parent class method has been changed in child class.



Final Keyword:
========================================================
- If class has final keyword it cannot be extended
- If method has final keyword it cannot be overrided
- If variable has final keyword it becomes constant and cannot be changed after declaration.
- Final datatype either should be instantiated immediately or inside constructor or inside initialization block.



Object Class:
========================================================
- Object class is found in java.lang package. java.lang package is imported by default in all classes.
- JNI = Java Native Interface is a foreign function interface programming framework that enables java code running in JVM to call and be called by native application and libraries written in order languages such as C/C++. You can see native keyword with the methods that are written in C/C++.
- The native keyword is applied to a method to indicate that the method is implemented in native code using JNI (Java Native Interface). Native is a modifier applicable only for methods and we can’t apply it anywhere else. The methods which are implemented in C, C++ are called as native methods or foreign methods.
    eg: public final native Class<?> getClass();
        public final native void notify();
        public final native void notifyAll();

    The main objectives of native keyword are:

        - To improve performance of the system.
        - To achieve machine level/memory level communication.
        - To use already existing legacy non-java code.

Methods in Object Class
-------------------------------
- public getClass() = return the 'Class' of the object
- public hashCode() = return the 'integer' hash value of the object which is used in HashMap and HashSet
- public equals() = return the 'boolean' true/false of two objects references.
- protected clone() = return a new copy of the existing 'object'. Two type of cloning shallow cloing / Deep cloning
    - shallow cloning (by-default) = All references are copied, doesn't create a problem if we clone fields of primitive type but is a problem when cloning reference types because only references are cloned but the true object behind those references are not cloned.
    - deep cloning = To clone all field of the object we need to override clone method and implement deep cloning.
- public toString() = return 'String' representation of an object.
- public final native void notify() - these are used to monitor objects in multi threading 
- public final native void notify() - these are used to monitor objects in multi threading
- public final native void wait(long var1) - these are used to monitor objects in multi threading
- protected void finalize() - used to destruct object from Heap memory by the JVM (before JDK 9). Since JDK 9+ we have automated this using garbage collector tool.





Design Principles for OOPS:
==========================================
SOLID - Intriduced by Robert Martin (Uncle Bob) in paper desig principles and design patterns.

- S = Single Responsibility Principle 
        A class should have only one reason to change. 
        If there are two functionality then there should two separate classes created.
- O = Open/Closed principle 
        Software entities (classes, modules, functions, etc. should be open for extensions and closed for modification. 
        Open for extension - Avoid declaring final classes, final method, static field. 
        Closed for modification means that class is defined wth enough level of abstraction to extend it and create new types on the basis of it.
- L = Liskov substitution principle
        Objects in a program should be replaceable with instances of their subtypes without altering the correctness of the program.
        Should not violate polymorphism principle.
        To make sure that we can replace one object with another, we need to check the derived classes, just extends base classes without replacement of parent class.
- I = Interface segregation principle
        Clients should not be forced to use/depend on methods which it does not use.
        Instead of setting up a single interface which involves all business functionality it is preferred to construct smaller segregated interfaces.
- D = Dependency inversion principle
        High level modules should not depend on low level modules, infact both should depend on abstraction.
        Abstraction should not depend on details, infact details should be dependent on abstration.



Exception:
==========================================
- In Java, an exception is an event that disrupts the normal flow of the program. It is an object which is thrown at runtime. 

- What is Exception Handling? Exception Handling is a mechanism to handle runtime errors such as ClassNotFoundException, IOException, SQLException, RemoteException, etc.

- Two Categories of exception:
    - Checked - determined during compilation time. (FileNotFoundException)
    - Unchecked - determined only during runtime. (NullPointerException)
    - For custom checked exception extend your child class from Exception class.
    - For custom unchecked exception extend your child class from RuntimeException class.

- If two exceptions come from same type hierarchy then we need to specify the most specific type first "FileNotFoundException" and then the generic type "IOException". FileNotFoundException is child of IOException. If it is not follow we get unreachable catch block compilation error.

- finally block is called with ot without exception. Finally block is called no matter what happens. We can also use try-finally block as well.
  try-catch, try-catch-finally, try-finally = all valid scenario

- Previous finally block was used to close connections / release critical resources. But now try-with-resource block is used to do so.

- finally block won't be executed if we use System.exit(0) and stop JVM, or throw new Exception in between, or if we use it in multi threading and the thread is terminated in between.

- throws keyword is added in the method signature which let's a user know that the particular method can throw Exception and should be handled when using the method.




Genrics:
=======================================================
- Generic methods are methods which introduce its own type parameter.



Stream API:
=======================================================
- Stream API is a set of interfaces that allows to process elements to perform operations with them in containers and arrays with the help of functional interfaces.
- A sequence of elements supporting sequential and parallel aggregate operations. The following example illustrates an aggregate operation using Stream and IntStream:

     int sum = widgets.stream()
                      .filter(w -> w.getColor() == RED)
                      .mapToInt(w -> w.getWeight())
                      .sum();
 
- filter(), mapToInt() are intermediate functions. They have listeners which modify data and pass to next listener.
- sum(), collect(), forEach(), toArray(), count(), max(), min() is a terminal function which terminates the whole stream.





Collections:
========================================================
Marker Interface are used to do special operation or adds as a metadata to the compiler to perform stuffs.
Example - RandomAccess which indicates that collection which implments this would retrieve data in constant time
Also RandomAccess is being used in Collections class to use indexedBinarySearch algorithm instead of iteratorBinaryAlgorithm


ArrayList 		- thread unsafe
				public boolean add(E e) {
					modCount++;
					add(e, elementData, size);
					return true;
				    }

In ArrayList we need to copy the existing array when trying to add/remove any element either in the beginning ot in the middle of the list.
ArrayList needs consecutive memory location.
Use ArrayList if you want to add elements to the end of the list and read by index

Vector 		- thread safe, methods have synchronized keyword
				public synchronized boolean add(E e) {
					modCount++;
					add(e, elementData, elementCount);
					return true;
				    }

CopyOnWriteArrayList	- thread safe, methods have synchronized block, better performance and optimzation than Vector
				public boolean add(E e) {
					synchronized (lock) {
					    Object[] es = getArray();
					    int len = es.length;
					    es = Arrays.copyOf(es, len + 1);
					    es[len] = e;
					    setArray(es);
					    return true;
					}
				    }


Stack 			- thread unsafe, almost all methods are similar to Queue but follows LIFO hence it is recommended to use Deque instead


LinkedList

Implements Deque -> Queue interface. Better to use it in the form a Queue.
LinkedList is not required to move the previous of next element, we just need to change the link/pointer among the nodes to achieve the order.
LinkedList doesn't require consecutive memory location. Nodes can be anywhere in the memory what matters is only the pointers/links t other nodes.
LinkedList is faster in adding/removing nodes are anywhere in the list.
Use LinkedList to add elements to the beginning of the list and remove from the beginning of the list.
















Big O Notation
==========================================================================
O(1)		constant		Get element from array at any index
O(n)		linear			Find element in unsorted array
O(log n)	logarithmic		Find element in binary tree


ArrayList VS LinkedList
------------------------------------------
		ArrayList		LinkedList
get		O(1)			O(n)
add		O(1)*			O(1)
remove		O(n)			O(1)

* with the exception when ArrayList is extended or when adding elements at the beginning or middle of the list.












Git Basic Commands
=============================
git init                                - initialize a directory as git repository
git status                              - check the current status of files and directory

git add .                               - add all files to staging area (staging file would finally get added to snapshot/commit)
git add <file_name>                     - add a specific file to staging area

git commit -m <commit_msg>              - commit all files and directories from staging area
git commit -a -m <commit_msg>           - add files to staging and commit them as well (short cut command)
git commit --amend -m <new_commit_msg>  - change the last commit message (nothing should be in staging area)
git commit --amend -no-edit             - add the lastest staging changes to last commit without changing previous commit message

git rm --cached <file_path>             - remove a specific new file from getting added to staging area (this can be also achieved using ".gitignore" file)
git rm -r --cached <directory_path>     - remove all new files recursively from specific directory from getting added to staging area

git log                                 - check history of git commits

git --restore --staged <file_path>      - will remove the 'modified' file from the staging area to unstage state without discarding the latest changes on file.
git --restore <file_path>               - will discard the latest changes on file from staging area.

git remote -v                           - check if local repository is connected to remote repository
git remote add origin <HTTP/SSH URL>    - connect a remote repository to your local repository. (origin is a short hand name for remote repository/URL)
git push origin -u <branch_name>        - to push changes upstream (-u) to origin/remote repo url's particular branch
git remote set-url origin <URL>         - change remote URLs from HTTP to SSH and vice versa

git branch <branch_name>                - create new local branch
git branch                              - list of local branches
git branch -r                           - list of remote branches
git branch -a                           - list of all remote and local branches
git checkout <branch_name>              - move to existing branch
git switch <branch_name>                - move to existing branch (since Git2.0)
git checkout -b <branch_name>           - create and change branch
git switch -c <branch_name>             - create and change branch (since Git2.0)
git checkout <commit_id_first4chars>    - detatches from HEAD (latest commit) and take back to the old commit. This is used just to investigate old code and debug. (SHOULD NOT COMMIT any changes because it can be lost)
git branch -d <branch_name>             - delete branch from local
git push origin --delete <branch_name>  - delete branch from remote

git fetch                               - pulls changes from remote branch but does not merge those changes in local branch
git merge                               - to be used after git fetch so as to merge the latest changes from remote to local branch
git pull                                - pulls changes from remote branch and merges those changes in local branch (git fetch + git merge)

git rebase <master_branch>              - does adds all the changes of your local branch on top of the local master branch
git pull --rebase                       - does adds all the changes of your local branch on top of the remote master branch (git fetch + git rebase)

git reset                               - reset state of your file system to a specific revision option
git reset --hard                        - files from other region will be restored and all changes from other revisions will be removed
git reset --hard HEAD~1                 - reset state of our filesystem to the state that was one commit ago


 

